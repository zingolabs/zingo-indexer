searchState.loadedDescShard("zaino_fetch", 0, "A mempool-fetching, chain-fetching and transaction …\nZaino-Fetch Block, Transaction and Mempool Parser.\nJsonRPC client used to send requests to Zebrad.\nBlock fetching and deserialization functionality.\nHold error types for the BlockCache and related …\nZingo-Indexer mempool state functionality.\nTransaction fetching and deserialization functionality.\nBlockcache utility functionality.\nA block header, containing metadata about a block.\nZingo-Indexer Block.\nComplete block header.\nHash of the current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a compact block.\nExtracts the block height from the coinbase transaction.\nExtracts the block hash from the block header.\nReturns a compact block holding only action nullifiers.\n[Pre-Sapling] A reserved field which should be ignored. […\nThe root of the Bitcoin-inherited transaction Merkle tree, …\nThe hash of the previous block, used to create a chain of …\nThe block header, containing block metadata.\nBlock height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn encoded version of the target threshold this block’s …\nAn arbitrary field that miners can change to modify the …\nDecodes a hex encoded zcash full block into a FullBlock …\nDecodes a hex encoded zcash full block into a CompactBlock …\nBlock header data.\nThe Equihash solution.\nThe block timestamp is a Unix epoch time (UTC) when the …\nSerializes the block header into a byte vector.\nConverts a zcash full block into a compact block.\nThe block’s version field. This is supposed to be <code>4</code>:\nThe block transactions.\nParser Error Type.\nUTF-8 conversion error.\nInvalid Data Error\nIo Error.\nErrors from the JsonRPC client.\nErrors from the JsonRPC client.\nMempool Error struct.\nParser Error Type.\nSerialization and deserialization error.\nHexadecimal parsing error.\nErrors originating from prost decodings.\nUTF-8 conversion error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMempool state information.\nReturns the argument unchanged.\nReturns the hash of the block currently in the mempool.\nReturns the txids currently in the mempool, filtered by …\nReturns the txids currently in the mempool.\nCalls <code>U::from(self)</code>.\nReturns an empty mempool.\nUpdates the mempool, returns true if the current block in …\nAn Orchard action.\nZingo-Indexer struct for a full zcash transaction.\njoinSplit is a JoinSplit description as described in 7.2 …\noutput is a Sapling Output Description as described in …\nspend is a Sapling Spend Description as described in 7.3 …\nFull Zcash Transactrion data.\nTxin format as described in …\nTxout format as described in …\nU-coordinate of the note commitment, derived from the note…\nX-coordinate of the commitment to the note.\nConsensus branch ID, used to identify the network upgrade …\nEncrypted transaction details including value transferred …\nEncrypted details of the new note, including its value and …\nEphemeral public key for Diffie-Hellman key exchange.\nEphemeral public key.\nIndicates if the transaction is an Overwinter-enabled …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the transaction contains either sapling …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of JoinSplit descriptions in a transaction, no longer …\nVersion group ID, used to specify transaction type and …\nA nullifier to a sapling note.\nA nullifier to a orchard note.\nList of Orchard actions.\nRaw transaction bytes.\nFull transaction data.\nCompactSize-prefixed, could be a pubkey or a script\nList of shielded outputs from the Sapling pool\nList of shielded spends from the Sapling pool\nConverts a zcash full transaction into a compact …\nList of transparent inputs in a transaction.\nList of transparent outputs in a transaction.\nTransaction Id, fetched using get_block JsonRPC with …\nNon-negative int giving the number of zatoshis to be …\nThe transaction format version.\nZcash CompactSize implementation taken from …\nThe maximum allowed value representable as a <code>[CompactSize]</code>\nUsed for decoding zcash blocks from a bytestring.\nTakes a vec of big endian hex encoded txids and returns …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads data from a bytestring, consuming data read, and …\nReads an integer encoded in compact form.\nReads the next byte from cursor into a bool, returns error …\nReads the next n bytes from cursor into a vec, returns …\nReads the next 4 bytes from cursor into an i32, returns …\nReads an integer encoded in contact form and performs …\nReads the next 4 bytes from cursor into a u32, returns …\nReads the next 8 bytes from cursor into a u64, returns …\nReads and interprets a Zcash (Bitcoin) custom compact …\nSkips the next n bytes in cursor, returns error message …\nWrites the provided <code>usize</code> value to the provided Writer in …\nJsonRPC client implementation.\nHold error types for the JsonRpcConnector and related …\nResponse types for jsonRPC client.\nJsonRPC Client config data.\nReturns the argument unchanged.\nReturns the total balance of a provided <code>addresses</code> in an […\nReturns the transaction ids made by the provided …\nReturns all unspent outputs for a list of addresses.\nReturns the requested block by hash or height, as a […\nReturns blockchain state information, as a […\nReturns software information from the RPC server, as a […\nReturns all transaction ids in the memory pool, as a JSON …\nReturns the raw transaction data, as a [<code>GetRawTransaction</code>] …\nReturns information about a range of Sapling or Orchard …\nReturns information about the given block’s Sapling &amp; …\nCalls <code>U::from(self)</code>.\nReturns a new JsonRpcConnector instance, tests uri and …\nSends the raw bytes of a signed transaction to the local …\nTries to connect to zebrad/zcashd using IPv4 and IPv6 and …\nReturns the http::uri the JsonRpcConnector is configured …\nReturns the reqwest::url the JsonRpcConnector is …\nInvalid URI Errors.\nType for errors without an underlying source.\nGeneral error type for handling JsonRpcConnector errors.\nReqwest Based Errors.\nSerialization/Deserialization Errors.\nURL Parse Errors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor for errors without an underlying source\nConverts JsonRpcConnectorError to tonic::Status\nThe transparent balance of a set of addresses.\nResponse to a <code>getbestblockhash</code> and <code>getblockhash</code> RPC …\nContains the hex-encoded hash of the sent transaction.\nInformation about the sapling and orchard note commitment …\nResponse to a <code>getblockchaininfo</code> RPC request.\nResponse to a <code>getinfo</code> RPC request.\nContains the Sapling or Orchard pool label, the index of …\nContains raw transaction, encoded as hex bytes.\nContains the hex-encoded Sapling &amp; Orchard note commitment …\nThis is used for the output parameter of […\nThe block object.\nThe transaction object.\nOrchard note commitment tree information.\nThe request block, hex-encoded.\nThe raw transaction, encoded as hex bytes.\nSapling note commitment tree information.\nWrapper struct for a zebra Scrypt.\nContains the hex-encoded hash of the sent transaction.\nA wrapper struct for a zebra serialized block.\nA wrapper struct for a zebra serialized transaction.\nWrapper struct for a zebra SubtreeRpcData.\nVec of transaction ids, as a JSON array.\nThe transparent address, base58check encoded\nThe total transparent balance.\nThe hash of the currently best block, in big-endian order, …\nThe current number of blocks processed in the server, …\nThe node version build number\nCurrent network name as defined in BIP70 (main, test, …\nBranch IDs of the current and upcoming consensus rules\nIf syncing, the estimated height of the chain, else the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe block hash corresponding to the treestate, hex-encoded.\nThe block height corresponding to the treestate, numeric.\nThe block height, numeric.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns orchard data held by [‘GetBlockTrees’].\nA treestate containing an Orchard note commitment tree, …\nThe transparent output index, numeric\nThe shielded pool to which the subtrees belong.\nReturns sapling data held by [‘GetBlockTrees’].\nA treestate containing a Sapling note commitment tree, …\nThe amount of zatoshis in the transparent output\nThe transparent output script, hex encoded\nThe index of the first subtree.\nA sequential list of complete subtrees, in <code>index</code> order.\nThe server sub-version identifier, used as the network …\nUnix time when the block corresponding to the treestate …\nVec of txids.\nThe output txid, in big-endian order, hex-encoded\nStatus of network upgrades\nThe number of confirmations of this block in the best …\nThe hash of the requested block.\nThe height of the requested block.\nThe height of the requested block.\nInformation about the note commitment trees.\nList of transaction IDs in block order, hex-encoded.\nThe confirmations of the block in the best chain that …\nThe height of the block in the best chain that contains …\nThe raw transaction, encoded as hex bytes.")