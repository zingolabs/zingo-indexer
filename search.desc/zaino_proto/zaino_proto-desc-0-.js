searchState.loadedDescShard("zaino_proto", 0, "Holds tonic generated code for the lightwallet service …\nHolds tonic generated code for the lightwallet service …\nInformation about the state of the chain as of a given …\nA compact representation of the shielded data in a Zcash …\nA compact representation of an Orchard Action.\nA compact representation of a Sapling Output.\nA compact representation of a Sapling Spend.\nA compact representation of the shielded data in a Zcash …\ninformation about the state of the chain as of this block\nFirst 52 bytes of ciphertext.\n[52] The first 52 bytes of the encCiphertext field\nNote commitment u-coordinate.\n[32] The x-coordinate of the note commitment for the …\nEphemeral public key.\n[32] An encoding of an ephemeral Pallas public key\nThe transaction fee: present if server can provide. In the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe ID (hash) of this block, same as in block explorers\nthe ID (hash) of this transaction, same as in block …\n(hash, prevHash, and time) OR (full header)\nthe height of this block\nIndex and hash will allow the receiver to call out to chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNullifier (see the Zcash protocol specification)\n[32] The nullifier of the input note\nthe size of the Orchard note commitment tree as of the end …\nthe ID (hash) of this block’s predecessor\nthe version of this wire format, for storage\nthe size of the Sapling note commitment tree as of the end …\nUnix epoch time when the block was mined\nzero or more compact transactions from this block\nA proposed change or ephemeral output. If the transparent …\nThe fee rule used in constructing a Proposal\nAn object wrapper for memo bytes, to facilitate …\nProtobuf requires that enums have a zero discriminant as …\nThe Orchard value pool\nA mapping from ZIP 321 payment index to the output pool …\nProtobuf requires that enums have a zero discriminant as …\n10000 ZAT\nA reference to a change or ephemeral output from a prior …\nA reference to a payment in a prior step of the proposal. …\nA data structure that describes a series of transactions …\nA data structure that describes the inputs to be consumed …\nThe unique identifier and value for an input to be used in …\nThe unique identifier and value for each proposed input …\nThe Sapling value pool\nThe proposed change outputs and fee value.\nThe transparent value pool (P2SH is not distinguished from …\n1000 ZAT\nMAX(10000, 5000 * logical_actions) ZAT\nThe anchor height to be used in creating the transaction, …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nThe total value, fee value, and change outputs of the …\nThe fee to be paid by the proposed transaction, in …\nReturns the enum value of <code>fee_rule</code>, or the default if the …\nThe fee rule used in constructing this proposal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ValuePool</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>FeeRule</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nThe inputs to be used in creating the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is to be an ephemeral output.\nA flag indicating whether the step is for a shielding …\nReturns <code>true</code> if <code>value</code> is a variant of <code>ValuePool</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>FeeRule</code>.\nThe optional memo that should be associated with the newly …\nThe target height for which the proposal was constructed\nThe vector of selected payment index / output pool …\nA list of change or ephemeral output values.\nNested message and enum types in <code>ProposedInput</code>.\nThe version of this serialization format.\nSets <code>fee_rule</code> to the provided enum value.\nSets <code>value_pool</code> to the provided enum value.\nSets <code>value_pool</code> to the provided enum value.\nSets <code>value_pool</code> to the provided enum value.\nThe series of transactions to be created.\nZIP 321 serialized transaction request\nThe value of a change or ephemeral output to be created, …\nReturns the enum value of <code>value_pool</code>, or the default if …\nReturns the enum value of <code>value_pool</code>, or the default if …\nReturns the enum value of <code>value_pool</code>, or the default if …\nThe value pool in which the change or ephemeral output …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nA BlockID message contains identifiers to select a block: …\nBlockRange specifies a series of blocks from start to end …\nChainspec is a placeholder to allow specification of a …\nDuration is currently used only for testing, so that the …\nEmpty is for gRPCs that take no arguments, currently only …\nResults are sorted by height, which makes it easy to issue …\nLightdInfo returns various information about this …\nPingResponse is used to indicate concurrency, how many …\nRawTransaction contains the complete transaction data. It …\nA SendResponse encodes an error code and a string. It is …\nTransparentAddressBlockFilter restricts the results to the …\nThe TreeState is derived from the Zcash z_gettreestate rpc.\nA TxFilter contains the information needed to identify a …\nt-address\nString value of the enum field names used in the ProtoBuf …\nblock identifier, height or hash\nlatest block on the best chain\neither “main” or “test”\nGenerated client implementations.\nGenerated server implementations.\nThe hash of the block that completed this subtree.\nThe height of the block that completed this subtree in the …\nprotocol identifier, see consensus/upgrades.cpp\nexact data returned by Zcash ‘getrawtransaction’\nless than tip height if zcashd is syncing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ShieldedProtocol</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\ntransaction ID (hash, txid)\nblock id\nheight that the transaction was mined (or -1)\nblock height\nindex within the block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ShieldedProtocol</code>.\nMaximum number of entries to return, or 0 for all entries.\nzero means unlimited\n“main” or “test”\norchard commitment tree state\nstart, end heights\nThe 32-byte Merkle root of the subtree.\ndepends on mainnet or testnet\nsapling commitment tree state\nSets <code>shielded_protocol</code> to the provided enum value.\nReturns the enum value of <code>shielded_protocol</code>, or the …\nShielded protocol to return subtree roots for\nIndex identifying where to start returning subtree roots\ntrue\nUnix epoch time when the block was mined\nexample: “v4.1.1-877212414”\nexample: “/MagicBean:4.1.1/”\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nReturn the compact block corresponding to the given block …\nSame as GetBlock except actions contain only nullifiers\nReturn a list of consecutive compact blocks\nSame as GetBlockRange except actions contain only …\nReturn the height of the tip of the best chain\nReturn information about this lightwalletd instance and …\nReturn a stream of current Mempool transactions. This will …\nReturn the compact transactions currently in the mempool; …\nReturns a stream of information about roots of subtrees of …\nReturn the txids corresponding to the given t-address …\nReturn the requested full (not compact) transaction (as …\nGetTreeState returns the note commitment tree state …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nTesting-only, requires lightwalletd –ping-very-insecure …\nCompress requests with the given encoding.\nSubmit the given transaction to the Zcash network\nGenerated trait containing gRPC methods that should be …\nServer streaming response type for the …\nServer streaming response type for the …\nServer streaming response type for the GetBlockRange …\nServer streaming response type for the GetMempoolStream …\nServer streaming response type for the GetMempoolTx method.\nServer streaming response type for the GetSubtreeRoots …\nServer streaming response type for the GetTaddressTxids …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nReturn the compact block corresponding to the given block …\nSame as GetBlock except actions contain only nullifiers\nReturn a list of consecutive compact blocks\nSame as GetBlockRange except actions contain only …\nReturn the height of the tip of the best chain\nReturn information about this lightwalletd instance and …\nReturn a stream of current Mempool transactions. This will …\nReturn the compact transactions currently in the mempool; …\nReturns a stream of information about roots of subtrees of …\nReturn the txids corresponding to the given t-address …\nReturn the requested full (not compact) transaction (as …\nGetTreeState returns the note commitment tree state …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nTesting-only, requires lightwalletd –ping-very-insecure …\nCompress responses with the given encoding, if the client …\nSubmit the given transaction to the Zcash network")